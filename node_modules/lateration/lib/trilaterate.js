"use strict";

var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = trilaterate;

var _invariant = require("invariant");

var _invariant2 = _interopRequireDefault(_invariant);

var _circle = require("./circle");

var _circle2 = _interopRequireDefault(_circle);

var _utilsPair = require("./utils/pair");

var _utilsPair2 = _interopRequireDefault(_utilsPair);

var _utilsSubtractCircles = require("./utils/subtractCircles");

var _utilsSubtractCircles2 = _interopRequireDefault(_utilsSubtractCircles);

var _utilsIntersectLines = require("./utils/intersectLines");

var _utilsIntersectLines2 = _interopRequireDefault(_utilsIntersectLines);

function trilaterate(arr) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(arr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var obj = _step.value;

      (0, _invariant2["default"])(obj instanceof _circle2["default"], "All elements in `arr` are expected to be Circle instances.");
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"]) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  (0, _invariant2["default"])(arr.length > 2, "At least three Circles are necessary for lateration.");

  var pairs = (0, _utilsPair2["default"])(arr);

  var lines = pairs.map(function (pair) {
    return (0, _utilsSubtractCircles2["default"])(pair[0], pair[1]);
  }).filter(function (obj) {
    return !!obj;
  });

  pairs = (0, _utilsPair2["default"])(lines);

  var points = pairs.map(function (pair) {
    return (0, _utilsIntersectLines2["default"])(pair[0], pair[1]);
  }).filter(function (obj) {
    return !!obj;
  });

  if (points.length === 0) {
    console.error("Out of Range: No point could be calculated from Circle set.");
    return null;
  }

  // NOTE: This is a destructive operation as it is mutating points!
  var result = points.reduce(function (a, b) {
    a.x += b.x;
    a.y += b.y;
    return a;
  });

  result.normalize(points.length);
  return result;
}

module.exports = exports["default"];